apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  annotations:
    description: "mTLS mode can only be set to either UNSET or STRICT for all PeerAuthentications in the mesh."
  name: peerauthenticationstrictmtls
spec:
  crd:
    spec:
      names:
        kind: PeerAuthenticationStrictMtls
      validation:
        legacySchema: true
        openAPIV3Schema: {}
  targets:
  - rego: |-
      package asm.security.peerauthentication
      spec = input.review.object.spec
      valid_modes := {"UNSET", "STRICT"}
      # mTLS mode can only be set to either UNSET or STRICT for all PeerAuthentications in the mesh.
      violation[{"msg": msg}] {
          is_peerauthentication(input.review.kind)
          count({spec.mtls.mode} - valid_modes) > 0
          msg := "PeerAuthentication mtls mode can only be set to UNSET or STRICT"
      }
      # port level mtls
      violation[{"msg": msg}] {
          is_peerauthentication(input.review.kind)
          count({spec.portLevelMtls[port].mode} - valid_modes) > 0
          msg := sprintf("PeerAuthentication port <%v> has invalid mtls mode <%v>, it can only be set to UNSET or STRICT", [port, spec.portLevelMtls[port].mode])
      }
      is_peerauthentication(kind) {
          kind.kind == "PeerAuthentication"
          kind.group == "security.istio.io"
      }
    target: admission.k8s.gatekeeper.sh