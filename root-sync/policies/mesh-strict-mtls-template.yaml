apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  annotations:
    description: In the ASM root namespace, there should be a strict mTLS PeerAuthentication.
  name: allowedserviceportname
spec:
  crd:
    spec:
      names:
        kind: AllowedServicePortName
      validation:
        legacySchema: true
        openAPIV3Schema:
          properties:
            prefixes:
              description: Prefixes of allowed service port names.
              items:
                type: string
              type: array
  targets:
  - rego: |
      package asm.security.peerauthentication
      violation[{"msg": msg}] {
        has_strictness_set_to_high
        is_asm_peer_authn_mesh_strict_mtls(input.review.kind)
        # use input root namespace or default value istio-system
        root_ns := object.get(object.get(input, "parameters", {}), "rootNamespace", "istio-system")
        not namespace_has_default_strict_mtls_pa(root_ns)
        msg := sprintf("Root namespace <%v> does not have a strict mTLS PeerAuthentication", [root_ns])
      }
      namespace_has_default_strict_mtls_pa(ns) {
        pa := data.inventory.namespace[ns][_].PeerAuthentication[_]
        pa.spec.mtls.mode == "STRICT"
      }
      is_asm_peer_authn_mesh_strict_mtls(kind) {
        kind.kind == "AsmPeerAuthnMeshStrictMtls"
        kind.group == "constraints.gatekeeper.sh"
      }
      has_strictness_set_to_high {
        input.parameters.strictnessLevel == "High"
      }
    target: admission.k8s.gatekeeper.sh